%% 4DM90 Structural dynamics LSD 5: DFT/FFT
clear; clc; 
close all;

%% Define parameters
T = 5;
delta_f = 1 / T;
% N = T / delta_t;
N = 500;
delta_t = T / N;
t = (0:N-1)*delta_t;
fs = 1 / delta_t;

%% Define signals

signals = zeros(6,length(t));

% A harmonic signal with f = 1 Hz
f1 = 1;
signals(1,:) = sin((2*pi) * f1 * t);

% A signal being the sum of two harmonic functions with f1 = 1 Hz and f2 =
% 2 Hz and 90Â° phase shift
f2 = 2;
signals(2,:) = signals(1,:) + sin(((2*pi) * f2 * t) + deg2rad(90)); 

% A square wave signal, where each square has a length of 1 sec.
count = 0;
high = true;
for i = 1:length(t)
    if count == 100
        if high == true
            high = false;
        elseif high == false
            high = true;
        end
        count = 0;
    end
    if high == true
        signals(3,i) = 1;
    end
    count = count + 1;
end

% A sawtooth signal
for i = 1:length(t)
    signals(4,i) = mod(i, 100) / 100; % Normalizing to range [0, 1]
end

% A Dirac delta function
signals(5,1) = 1;

% A normally distributed (or Gaussian-distributed white noise signal with
% standard devitation of 1
signals(6,:) = randn(1, length(t));

%% Plot all signals in subplots
figure; 
for i = 1:size(signals,1)
    subplot(2,3,i);
    plot(t,signals(i,:));
    xlabel("time [s]");
    ylabel("amplitude [m]");
    title('Signal '+ string(i));
    ylim([1.5*min(signals(i,:)) 1.5*max(signals(i,:))]);
    grid on;
end

%% Perfrom the fft of all signals 
fftSignals = 1/N*fft(signals, [], 2);
f = (0:N-1) * delta_f; % Frequency vector

% Plot the magnitude of the FFT results
figure;
for i = 1:size(fftSignals, 1)
    subplot(2, 3, i);
    h = stem(f, abs(fftSignals(i,:)));
    h.Marker = '.';        % use a dot instead of a circle
    h.MarkerSize = 6;      % smaller dot
    h.LineWidth = 0.1;       % thinner stem lines
    xlabel("Frequency [Hz]");
    ylabel("Magnitude [m]");
    title('FFT of Signal ' + string(i));
    xlim([0 max(f)]);
    ylim([0 1.2*max(abs(fftSignals(i,:)))]);
    grid on;
end

%% Compare the influence of varying the parameters T and N
N_comparison = [4 10 100];
T_comparison = [1 5 10];

% Loop through T while keeping N constant
figure;
for i = 1:length(T_comparison)
    %Define signal
    delta_t2 = T_comparison(i) / N_comparison(3);
    t2 = (0:N_comparison(3)-1)*delta_t2;
    signal2 = sin(((2*pi) * f1 * t2)) + sin(((2*pi) * f2 * t2) + deg2rad(90)); 

    % Perform the fft
    fft2 = 1/N_comparison(3)*fft(signal2);

    % Define frequeny axis
    delta_f2 = 1/T_comparison(i);
    f_2 = (0:N_comparison(3)-1) * delta_f2;

    % plot result in subplot
    subplot(2,2,i);
    h = stem(f_2, abs(fft2));
    h.Marker = '.';        % use a dot instead of a circle
    h.MarkerSize = 6;      % smaller dot
    h.LineWidth = 0.1;       % thinner stem lines
    xlabel("Frequency [Hz]");
    ylabel("Magnitude [m]");
    title('FFT of Signal 2: N = ' + string(N_comparison(3)) + ' T = ' + string(T_comparison(i)));
    xlim([0 max(f_2)]);
    ylim([0 1.2*max(abs(fft2))]);
    grid on;
end


% Loop through N while keeping T constant
figure;
for i = 1:length(N_comparison)
    %Define signal
    delta_t2 = T_comparison(1) / N_comparison(i);
    t2 = (0:N_comparison(i)-1)*delta_t2;
    signal2 = sin(((2*pi) * f1 * t2)) + sin(((2*pi) * f2 * t2) + deg2rad(90)); 

    % Perform the fft
    fft2 = 1/N_comparison(i)*fft(signal2);

    % Define frequeny axis
    delta_f2 = 1/T_comparison(1);
    f_2 = (0:N_comparison(i)-1) * delta_f2;

    % plot result in subplot
    subplot(2,2,i);
    h = stem(f_2, abs(fft2));
    h.Marker = '.';        % use a dot instead of a circle
    h.MarkerSize = 6;      % smaller dot
    h.LineWidth = 0.1;       % thinner stem lines
    xlabel("Frequency [Hz]");
    ylabel("Magnitude [m]");
    title('FFT of Signal 2: N = ' + string(N_comparison(i)) + ' T = ' + string(T_comparison(1)));
    xlim([0 max(f_2)]);
    ylim([0 1.2*max(abs(fft2))]);
    grid on;
end




%% Expand signal 2 with zero padding. 
N_zeros = 100;
signal_zero_padded = [squeeze(signals(2,:)), zeros(1,N_zeros)];

fft_signal_zero_padded = fft(signal_zero_padded);

figure; 
subplot(2,1,1);
plot(signal_zero_padded);
xlabel("Time [s]");
ylabel("Amplitude [m]");
title('Zero-Padded Signal 2');
grid on;

subplot(2,1,2);
stem(abs(fft_signal_zero_padded));
xlabel("Frequency [Hz]");
ylabel("Magnitude [m]");
title('FFT of Zero-Padded Signal 2');
xlim([0 max(f)]);
grid on;

%% Demonstrate the effect of aliasing on a cosine wave

f_signal = 50;     % signal frequency
t = 1;             % total time duration of measurement

t_cont = linspace(0, t, 5000);
sig_cont = cos(2*pi*f_signal*t_cont);

Fs1 = 300;
N1 = Fs1 * t;
T1 = 1 / Fs1;
t1 = (0:N1-1) * T1;
sig_1 = cos(2*pi*f_signal*t1);

Fs2 = 40;
N2 = Fs2 * t;
T2 = 1 / Fs2;
t2 = (0:N2-1) * T2;
sig_2 = cos(2*pi*f_signal*t2);

fft_no_alias = abs(fft(sig_1)/N1);
fft_alias    = abs(fft(sig_2)/N2);

f1 = (0:N1-1) * (Fs1/N1);  
f2 = (0:N2-1) * (Fs2/N2);

figure;

subplot(2,1,1)
plot(t_cont, sig_cont, 'k', 'LineWidth', 1.2) % continuous reference
hold on
stem(t1, sig_1, 'r','filled')
title('No aliasing (Fs = 300 Hz)')
xlabel('Time [s]'), ylabel('Amplitude')
legend('True cosine','Samples')
xlim([0 0.2])

subplot(2,1,2)
plot(t_cont, sig_cont, 'k', 'LineWidth', 1.2)
hold on
stem(t2, sig_2, 'b','filled')
title('Aliased signal (Fs = 40 Hz)')
xlabel('Time [s]'), ylabel('Amplitude')
legend('True cosine','Samples')
xlim([0 0.2])

% --- Plot spectra ---
figure;
subplot(2,1,1)
plot(f1, fft_no_alias)
xlim([0 Fs1/2])
title('Spectrum without aliasing (Fs = 300 Hz)')
xlabel('Frequency [Hz]'), ylabel('Magnitude')

subplot(2,1,2)
plot(f2, fft_alias)
xlim([0 Fs2/2])
title('Spectrum with aliasing (Fs = 40 Hz)')
xlabel('Frequency [Hz]'), ylabel('Magnitude')

%% Demonstrate signal leakage
%Since signal leakage occurs when the period given cosine or sine present in the
%signal is not a integer multiple of the measurement time it can be shown
%as follows

f_signal = 50;     % signal frequency
t = 0.07;          % total time duration of measurement
Fs = 1000; %well above nyquist
T = 1/Fs;
N = t*1000;
t_series = (0:N-1)*T;
sig_sampled = cos(2*pi*f_signal*t_series);

t_cont = linspace(0,t,5000);
sig_cont = cos(2*pi*f_signal*t_cont);

figure;
plot(t_cont, sig_cont, 'k', 'LineWidth', 1.2) % continuous reference
hold on
stem(t_series, sig_sampled, 'r', 'filled')   % sampled points
xlabel('Time [s]')
ylabel('Amplitude')
title('Time series: continuous vs sampled signal')
legend('Continuous cosine', 'Sampled points')
xlim([0 t])

fft_sig = abs(fft(sig_sampled)/N);       % normalize FFT
f_axis = (0:N-1)*(Fs/N);                % frequency axis

figure;
plot(f_axis, fft_sig, 'b', 'LineWidth', 1.2)
xlim([0 Fs/2])   % show up to Nyquist
xlabel('Frequency [Hz]')
ylabel('Magnitude')
title('Frequency spectrum of sampled signal')





